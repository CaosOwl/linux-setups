#+STARTIP: overview
* server
  #+BEGIN_SRC emacs-lisp
  ;;initialize server to pay the cost of emacs only once

  ;;(server-start)

  #+END_SRC
* emacs variable
  #+BEGIN_SRC emacs-lisp

  ;;inibit welcome screen
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
  
  ;;let the minibuffer fi any size
  (setq resize-mini-windows  t)

  ;;set yes to y
  (fset 'yes-or-no-p 'y-or-n-p)

  ;;move quickly between windows
  (windmove-default-keybindings)
  (setq windmove-wrap-around t)

  #+END_SRC
* gdb
  #+BEGIN_SRC emacs-lisp
  (setq
  ;; use gdb-many-windows by default
  gdb-many-windows t
  
  ;; Non-nil means display source file containing the main routine at startup
  gdb-show-main t
  )
  #+END_SRC
* shell
  #+BEGIN_SRC emacs-lisp

;;use .basrc of terminal in eshell

;;from protesilaoconfiguration
(use-package shell
  :commands shell-command
  :config
  (setq ansi-color-for-comint-mode t)
  (setq shell-command-prompt-show-cwd t)) ; Emacs 27.1

;;removed due to some clash with newer version
;;(when (memq window-system '(mac ns x))
;;(exec-path-from-shell-initialize))

;;addcolor
(add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;;shortcut
  (global-set-key (kbd "M-s M-s") 'shell)

  #+END_SRC
* speedbar
  #+BEGIN_SRC emacs-lisp
  ;;make speedbar appear in the same window
  ;;(require 'sr-speedbar)
  (setq
  ;; skip speedbar when typing C-x o
  sr-speedbar-skip-other-window-p t
  )
  ;;remap speedbar to key binding
  (global-set-key (kbd "C-x p") 'sr-speedbar-toggle)
  #+END_SRC 
* COMMENT auto complete
  #+begin_src emacs-lisp
  ;;start autocomplete
  (require 'auto-complete)
  #+end_src
** for latex
   #+begin_src emacs-lisp
   (add-to-list 'ac-modes 'Latex-mode) ; beware of using 'LaTeX-mode instead

   (defun my-ac-latex-mode () ; add ac-sources for latex
   (setq ac-sources
   (append '(ac-source-math-unicode
   ac-source-math-latex
   ac-source-latex-commands)
   ac-sources)))

   (add-hook 'LaTeX-mode-hook 'my-ac-latex-mode)
   (setq ac-math-unicode-in-math-p t)
   (ac-flyspell-workaround) ; fixes a known bug of delay due to flyspell (if it is there)
   

   #+end_src
** org mode
   #+begin_src emacs-lisp
   (add-to-list 'ac-modes 'org-mode) ; auto-complete for org-mode (optional)
   (require 'org-ac)
   
   ;; Make config suit for you. About the config item, eval the following sexp.
   ;; (customize-group "org-ac")

   (org-ac/config-default)

   #+end_src
** cpp 
   #+begin_src emacs-lisp
   
   

   #+end_src
** closing config
   #+begin_src emacs-lisp
   (ac-config-default)
   (require 'auto-complete-config)
   (setq ac-auto-start nil)            ; if t starts ac at startup automatically
   (setq ac-auto-show-menu t)
   (global-auto-complete-mode t)
   #+end_src

* company
  #+BEGIN_SRC emacs-lisp

  (use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)

  (global-company-mode t)
  )

  (use-package company-irony
  :ensure t
  :config 
  (add-to-list 'company-backends 'company-irony)
  )

  #+END_SRC

** cpp
   #+begin_src emacs-lisp
   ;;for C+++
   (use-package irony
   :ensure t
   :config
   (add-hook 'c++-mode-hook 'irony-mode)
   (add-hook 'c-mode-hook 'irony-mode)
   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
   )

   #+end_src

** python
   #+begin_src emacs-lisp

  (defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)
  (use-package company-jedi
  :ensure t
  :config
  (add-hook 'python-mode-hook 'jedi:setup)
  )


  (defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)

   #+end_src
* org-mode
  #+BEGIN_SRC emacs-lisp
  ;;automatically show immage inline
  (setq org-startup-with-inline-images t)
  
  ;;automatic size of inline image
  (setq org-image-actual-width 400)

  ;;load bullet points
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;;make formula in latex larger
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))

  ;;automatically create latex fragment after saving
  ;;(use-package org-fragtog
  ;;:ensure t
  ;;:config
  ;;manually load the file for now
  (load-file "~/.emacs.d/org-fragtog/org-fragtog.el")
  (add-hook 'org-mode-hook 'org-fragtog-mode)

  
  (add-hook 'org-mode-hook
  (lambda ()
  (add-hook 'after-save-hook 'my/org-render-latex-fragments nil 'make-the-hook-local)))

  ;;enable visual line mode to wrap line
  (global-visual-line-mode 1)

  ;;allow extra shortcut
  (require 'org-tempo)

  #+END_SRC 
** org classes
*** beamer
    here below a little class for exporting org file in Beamer
    #+begin_src emacs-lisp

      ;; allow for export=>beamer by placing

      ;; #+LaTeX_CLASS: beamer in org files
      (unless (boundp 'org-export-latex-classes)
        (setq org-export-latex-classes nil))
      (add-to-list 'org-export-latex-classes
                   ;; beamer class, for presentations
                   '("beamer"
                     "\\documentclass[11pt]{beamer}\n
        \\mode<{{{beamermode}}}>\n
        \\usetheme{{{{beamertheme}}}}\n
        \\usecolortheme{{{{beamercolortheme}}}}\n
        \\beamertemplateballitem\n
        \\setbeameroption{show notes}
        \\usepackage[utf8]{inputenc}\n
        \\usepackage[T1]{fontenc}\n
        \\usepackage{hyperref}\n
        \\usepackage{color}
        \\usepackage{listings}
        \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
        frame=single,
        basicstyle=\\small,
        showspaces=false,showstringspaces=false,
        showtabs=false,
      keywordstyle=\\color{blue}\\bfseries,
      commentstyle=\\color{red},
      }\n
      \\usepackage{verbatim}\n
      \\institute{{{{beamerinstitute}}}}\n          
      \\subject{{{{beamersubject}}}}\n"
      
      ("\\section{%s}" . "\\section*{%s}")
      
      ("\\begin{frame}[fragile]\\frametitle{%s}"
      "\\end{frame}"
      "\\begin{frame}[fragile]\\frametitle{%s}"
      "\\end{frame}")))
      
      ;; letter class, for formal letters
      
      (add-to-list 'org-export-latex-classes
      
      '("letter"
      "\\documentclass[11pt]{letter}\n
      \\usepackage[utf8]{inputenc}\n
      \\usepackage[T1]{fontenc}\n
      \\usepackage{color}"
      
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
          
    #+end_src
* Agenda
  #+BEGIN_SRC emacs-lisp

  ;;uncomment the block if you want a customized agenda location
  '(org-agenda-files (quote ("~/polybox/qPhD/org_files/*.org")))

  ;;shortcut to agenda
  (global-set-key (kbd "C-c a") 'org-agenda)

  ;;load all org file in agenda
  ;;(load-library "find-lisp")
  ;;(setq org-agenda-files
  ;;(find-lisp-find-files "~/.org/" "\.org$"))

  #+END_SRC  
* Yasnippet
TODO: make a personal folder with needed snippets
  #+BEGIN_SRC emacs-lisp
  
  (use-package yasnippet
  :ensure t
  :config
  (use-package yasnippet-snippets
  :ensure t)
     (yas-reload-all))

  

  #+END_SRC
* Latex`
  #+BEGIN_SRC emacs-lisp
  ;;auctex mode
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

  (setq reftex-plug-into-AUCTeX t)
  ;;add hook for yasnippet
  ;;(add-hook 'Latex-mode-hook 'yas-minor-mode)

  ;;scale preview 
  (setq preview-scale-function 2)

  ;; Use pdf-tools to open PDF files
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
  TeX-source-correlate-start-server t)
  
  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
  #'TeX-revert-document-buffer)
  #+END_SRC 
* PDF-tools
  #+BEGIN_SRC emacs-lisp
  ;;pdf-tools tweak

  (require 'pdf-tools)
  (require 'org-pdfview)
  
  (use-package pdf-tools
  :ensure t
  :config

  ;; Install what need to be installed !
  (pdf-tools-install t t t)
  ;; open pdfs scaled to fit page
  (setq-default pdf-view-display-size 'fit-page)
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)
  ;; use normal isearch
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  ;; more fine-grained zooming
  (setq pdf-view-resize-factor 1.1)
  )

  ;;
  (add-hook 'pdf-view-mode-hook
            (lambda ()
              (pdf-misc-size-indication-minor-mode)
              (pdf-links-minor-mode)
              (pdf-isearch-minor-mode)
              (cua-mode 0)
              ))

  (add-to-list 'auto-mode-alist (cons "\\.pdf$" 'pdf-view-mode))

(defvar tv/prefer-pdf-tools (fboundp 'pdf-view-mode))
(defun tv/start-pdf-tools-if-pdf ()
  (when (and tv/prefer-pdf-tools
             (eq doc-view-doc-type 'pdf))
    (pdf-view-mode)))

(add-hook 'doc-view-mode-hook 'tv/start-pdf-tools-if-pdf)

(use-package org-pdfview            
             :ensure t)


;;same with org mode
(eval-after-load 'org '(require 'org-pdfview))

(add-to-list 'org-file-apps 
'("\\.pdf\\'" . (lambda (file link)
(org-pdfview-open link))))
  #+END_SRC 
* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp

   (use-package counsel
   :ensure t
   :bind
   (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))
   



  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))
  
  ;;use-package
  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper-isearch)
	 ("C-r" . swiper-isearch)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))

  #+END_SRC
** ivy rich
   more rich collection of ivy

   #+BEGIN_SRC emacs-lisp

(use-package ivy-rich
;;:disabled                             ; switched to `icomplete'
:ensure t
:after ivy
:config
(setq ivy-rich-path-style 'abbreviate)

(setcdr (assq t ivy-format-functions-alist)
#'ivy-format-function-line)
(ivy-rich-mode 1))

   #+END_SRC
** ivy-posframe
   set properly ivy frame
   #+BEGIN_SRC emacs-lisp

(use-package ivy-posframe
  :disabled
  :ensure t
  :after ivy
  :delight
  :config
  (setq ivy-posframe-parameters
        '((left-fringe . 2)
          (right-fringe . 2)
          (internal-border-width . 2)
          ;; (font . "DejaVu Sans Mono-10.75:hintstyle=hintfull")
          ))
  (setq ivy-posframe-height-alist
        '((swiper . 15)
          (swiper-isearch . 15)
          (t . 10)))
  (setq ivy-posframe-display-functions-alist
        '((complete-symbol . ivy-posframe-display-at-point)
          (swiper . nil)
          (swiper-isearch . nil)
          (t . ivy-posframe-display-at-frame-center)))
  (ivy-posframe-mode 1))

   #+END_SRC
* C++
  #+BEGIN_SRC emacs-lisp
  ;OTHER C++ PROGRAMMING MODE
  ;;(require 'auto-complete)
  ;;(require 'auto-complete-config)
  ;;(ac-config-default)
  ;;start yasnippet
  (require 'yasnippet)
  
  ;copy click with mouse
  (defadvice mouse-save-then-kill (around mouse2-copy-region activate)
  (when (region-active-p)
  (copy-region-as-kill (region-beginning) (region-end)))
  ad-do-it)
  #+END_SRC 
** snippets
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp

  
  ;; ;; PYTHON CONFIGURATION
  ;; ;; --------------------------------------
  (setq python-environment-directory "/home/deppy/.anaconda3")
  (setq py-python-command "/home/deppy/.anaconda3/bin/python")
  (setq python-shell-interpreter "/home/deppy/.anaconda3/bin/python")
  (use-package elpy
  :ensure t
  :config 
  (elpy-enable))

  ;;(elpy-use-ipython)
  ;;try with pyenv

;; ;; use flycheck not flymake with elpy
;;(when (require 'flycheck nil t)
;;(setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
;;(add-hook 'elpy-mode-hook 'flycheck-mode))

  #+END_SRC 
* Make
  #+BEGIN_SRC emacs-lisp
   
   ;;shortcut to recompilation
   (global-unset-key (kbd "M-m"))
   (global-set-key (kbd "M-m") 'recompile)

  #+END_SRC
* try
  #+BEGIN_SRC emacs-lisp
  ;;try package
  (use-package try
  :ensure t) 
  #+END_SRC 
* git
** magit
  #+BEGIN_SRC emacs-lisp

;;magit
(use-package magit
:ensure t
:init
(progn
(bind-key "C-x g" 'magit-status)
))

#+END_SRC
** gutter
   #+BEGIN_SRC emacs-lisp
;;git gutter
(use-package git-gutter
:ensure t
:init
)
  #+END_SRC
** time-machine
   #+BEGIN_SRC emacs-lisp
;;git time machine
(use-package git-timemachine
:ensure t
)
#+END_SRC
* wgrep
  #+BEGIN_SRC emacs-lisp
  (use-package wgrep
  :ensure t
  )
  (use-package wgrep-ag
  :ensure t
  )
  (require 'wgrep-ag)
  #+END_SRC
* dired
  #+BEGIN_SRC emacs-lisp
  
  (setq dired-dwim-target t)
  
  (use-package dired-narrow
  :ensure t
  :config
  (bind-key "C-c C-n" #'dired-narrow)
  (bind-key "C-c C-f" #'dired-narrow-fuzzy)
  (bind-key "C-x C-N" #'dired-narrow-regexp)
  )
  
  (use-package dired-subtree :ensure t
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))

  ;;COLOR DIRED
  (use-package dired
  :hook (dired-mode . dired-hide-details-mode)
  :config
  ;;some command override
  (define-key dired-mode-map (kbd "<")'dired-up-directory)
  (define-key dired-mode-map (kbd ">")'dired-prev-subdir)
  ;;colorful columns
  (use-package diredfl
  :ensure t
  :config
  (diredfl-global-mode 1)))

  ;;GIT INFO MODE
  (use-package dired-git-info
  :ensure t
  :bind (:map dired-mode-map
  (")" . dired-git-info-mode)))

  ;;DIRED PEEP ;;NOT FOUND IN MELPA, FOR NOW LOADED
  ;;show preview in dired and hooks
  (load-file "~/.emacs.d/peep-dired/peep-dired.el")
  ;(use-package peep-dired
  ;:ensure t
  ;:defer t ;; don't access 'dired-mode-map' until package is open
  ;:bind (:map dired-mode-map
  ;     ("P" . peep-dired)))

  ;;HOOKS

  #+END_SRC
* all the icons
;  #+BEGIN_SRC emacs-lisp
  
  (use-package all-the-icons 
  :ensure t
  :defer 0.5)   
  
  (use-package all-the-icons-dired
  :ensure t
  )

  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  
  #+END_SRC

* multiple cursor 
  #+BEGIN_SRC emacs-lisp

  ;;require package
  (require 'multiple-cursors)

  ;;standard shortcuts
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

  ;;add cursor on click
  (global-unset-key (kbd "M-<down-mouse-1>"))
  (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)

  #+END_SRC
* which-key
  nice package that allow pop ups of commands
  #+BEGIN_SRC emacs-lisp
  
  ;;use-package machinery
  (use-package which-key
  :ensure t
  :config
  (which-key-mode))
  #+END_SRC
* macro-shortcuts
** student-organization
   macro to automatically print the todo list for a student in [[~/polybox/PhD/assistent verteilung/2019 FS/Organization.org][2019FS]]
   #+BEGIN_SRC emacs-lisp

   (fset 'student-organization
   [return ?* ?* ?* ?  S-right ?\[ ?/ ?\] ?  ?g ?r ?o ?u ?p return tab ?- ?  ?\[ ?  ?\] ?  ?S ?u ?m ?m ?a ?r ?y M-return ?\[ ?  ?\] ?  ?R ?e ?p ?o ?r ?t M-return ?\[ ?  ?\] ?  ?S ?i ?g ?n ?a ?t ?u ?r ?e])

   (global-set-key (kbd "C-c s") 'student-organization)
   
   #+END_SRC
* utility

#+BEGIN_SRC emacs-lisp

;;load mode for the periodic table
(load-file "~/.emacs.d/eperiodic.el")

#+END_SRC


